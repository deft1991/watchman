name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      build-only:
        default: false
        description: 'Deploy to an instance? By default do not deploy a new image to an instance(build and push only)'
        required: false
        type: boolean
  push:
    branches:
      - 'develop'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  API_IMAGE_NAME: 'deft1991/watchman'
  DOCKERFILE_NAME: 'Dockerfile'
  DOCKERFILE_PATH: './docker/'

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.API_IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
          labels: |
            maintainer=https://github.com/deft1991
            org.opencontainers.image.title=RunPodStableDiffusion
            org.opencontainers.image.description=Watchman bot for telegram channels
            org.opencontainers.image.url=https://hub.docker.com/r/deft1991/watchman

      - name: Build and push to the registry
        uses: docker/build-push-action@v5
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ${{ env.DOCKERFILE_PATH }}/${{ env.DOCKERFILE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
    outputs:
      tag: ${{ steps.meta.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event.inputs.build-only == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate an actual docker-compose.yaml
        id: docker-compose-gen
        env:
          API_IMAGE_TAG: ${{ needs.docker-build-push.outputs.tag }}
          SCRIPT_DIR: "scripts"
          DOCKER_DIR: "docker"
        run: |
          echo "Generate an updated docker-compose.yaml file with new tag..."
          ./"$SCRIPT_DIR"/update_docker_image.sh "${API_IMAGE_NAME}:${API_IMAGE_TAG}"
          
          DOCKER_COMPOSE_FILE="$(yq -o=json '.' $DOCKER_DIR/compose.yaml)"
          echo "DOCKER_COMPOSE_FILE="$(echo "$DOCKER_COMPOSE_FILE")"" >> "$GITHUB_OUTPUT"
          NGINX_CONFIG_FILE=$(cat "$DOCKER_DIR/proxy/nginx.conf" | base64 -w 0)
          echo "NGINX_CONFIG_FILE="$(echo "$NGINX_CONFIG_FILE")"" >> "$GITHUB_OUTPUT"
          NGINX_INDEX_FILE=$(cat "$DOCKER_DIR/proxy/index.html" | base64 -w 0)
          echo "NGINX_INDEX_FILE="$(echo "$NGINX_INDEX_FILE")"" >> "$GITHUB_OUTPUT"
          NGINX_403_FILE=$(cat "$DOCKER_DIR/proxy/403.html" | base64 -w 0)
          echo "NGINX_403_FILE="$(echo "$NGINX_403_FILE")"" >> "$GITHUB_OUTPUT"
          NGINX_502_FILE=$(cat "$DOCKER_DIR/proxy/502.html" | base64 -w 0)
          echo "NGINX_502_FILE="$(echo "$NGINX_502_FILE")"" >> "$GITHUB_OUTPUT"

      # copy the content of your public key ~/.ssh/id_rsa.pub to your clipboard
      # From your local computer ssh your remote host.
      # nano ~/.ssh/authorized_keys and paste your public key to the next line. If the file does not exit you can create it.
      - name: Login to API instance and deploy a new image
        uses: appleboy/ssh-action@v1.0.0
        env:
          DOCKER_COMPOSE_FILE: ${{ steps.docker-compose-gen.outputs.DOCKER_COMPOSE_FILE }}
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          NGINX_403_FILE: ${{ steps.docker-compose-gen.outputs.NGINX_403_FILE }}
          NGINX_502_FILE: ${{ steps.docker-compose-gen.outputs.NGINX_502_FILE }}
          NGINX_CONFIG_FILE: ${{ steps.docker-compose-gen.outputs.NGINX_CONFIG_FILE }}
          NGINX_INDEX_FILE: ${{ steps.docker-compose-gen.outputs.NGINX_INDEX_FILE }}
          SRC_DIR: "/home/ec2-user/watchman"
        with:
          host: ${{ secrets.API_HOST }}
          username: ${{ secrets.API_USERNAME }}
          key: ${{ secrets.API_KEY }}
          port: 22
          script_stop: true
          envs: DOCKER_COMPOSE_FILE,ENV_FILE,NGINX_CONFIG_FILE,NGINX_INDEX_FILE,NGINX_403_FILE,NGINX_502_FILE,SRC_DIR,DOCKER_PASSWORD,DOCKER_USERNAME
          command_timeout: 30m
          script: |
            # mkdir -p "${SRC_DIR}/proxy"
            # cd "$SRC_DIR"
            
            # Update nginx config
            # echo "$NGINX_CONFIG_FILE" | base64 -d > proxy/nginx.conf
            # echo "$NGINX_INDEX_FILE" | base64 -d > proxy/index.html
            # echo "$NGINX_403_FILE" | base64 -d > proxy/403.html
            # echo "$NGINX_502_FILE" | base64 -d > proxy/502.html
            
            # Update creds
            # echo "$ENV_FILE" | base64 -d > .env
            
            # Update docker compose file
            # yq -p=json <<<"$DOCKER_COMPOSE_FILE" > compose.yaml
            # echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            docker compose pull api
            docker compose up -d
            docker compose up -d --remove-orphans --force-recreate
